/*
 * Copyright 2016 Sebastian Schmidl
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package sas.systems.unveiled.server.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Properties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import sas.systems.unveiled.server.fileUpload.FilePOJO;

/**
 * 
 * @author <a href="https://github.com/CodeLionX">CodeLionX</a>
 */
public class DatabaseConnector {
	
	private static final Logger LOG = LoggerFactory.getLogger(DatabaseConnector.class);
	
	private Connection conn;
	
	private final String user;
	private final String password;
	private final String host;
	private final String databaseName;

	public DatabaseConnector() {
		// read properties file
		final Properties dbProperties = PropertiesLoader.loadPropertiesFile(PropertiesLoader.DATABASE_PROPERTIES_FILE);
		this.host = dbProperties.getProperty(PropertiesLoader.DBProps.DB_HOST);
		this.user = dbProperties.getProperty(PropertiesLoader.DBProps.DB_USER);
		this.password = dbProperties.getProperty(PropertiesLoader.DBProps.DB_PASSWORD);
		this.databaseName = dbProperties.getProperty(PropertiesLoader.DBProps.DB_NAME);
		
		// open database connection
		openConnection();
	}
	
	private void openConnection() {
		final String jdbcConnection = "jdbc:mysql://" + this.host + "/" + this.databaseName + "?useSSL=false";
		try {
			Class.forName("com.mysql.jdbc.Driver").newInstance();
			conn = DriverManager.getConnection(jdbcConnection, this.user, this.password);
			
		} catch (ClassNotFoundException | IllegalAccessException | InstantiationException e) {
			LOG.error("Could not load JDBC driver for MySQL", e);
			System.out.println("Could not load JDBC driver for MySQL");
			close();
		} catch (SQLException e) {
			LOG.error(this.getClass().getSimpleName() + " was not able to establish connection to MySQL database!", e);
			System.out.println(this.getClass().getSimpleName() + " was not able to establish connection to MySQL database!");
			close();
		}
	}
	
	public boolean insertFile(FilePOJO file) {
		final String fileTable = "file";
		final StringBuilder sql = new StringBuilder();
		
		// build sql statement
		sql.append("INSERT INTO ")
			.append(this.databaseName).append(".").append(fileTable).append(" ")
			.append("( ").append("owner_id, caption, filename, file_url, thumbnail_url, mediatype, ")
			.append("uploaded_at, size, lat, lng, public, verified, length, height, width, resolution") // 1-16
			.append(" ) ")
			.append("VALUES (")
			.append("?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? ")	// 1-16
			.append(")");
		
		try {
			final PreparedStatement stmt = conn.prepareStatement(sql.toString(), Statement.RETURN_GENERATED_KEYS);
			
			/* append parameters:
			 * file (id, owner_id, caption, filename, file_url, thumbnail_url,
			 *   mediatype, uploaded_at, size, lat, lng, public, verified, length,
			 *   height, width, resolution)
			 * id is generated by the database!
			 */
			int i = 1;
			stmt.setInt(i++, file.getOwner_id());						// 1
			stmt.setString(i++, file.getCaption());
			stmt.setString(i++, file.getFilename());
			stmt.setString(i++, file.getFile_url());
			stmt.setString(i++, file.getThumbnail_url());				// 5
			stmt.setString(i++, file.getMediatype());
			stmt.setLong(i++, file.getUploaded_at().getTime()/1000);
			stmt.setLong(i++, file.getSize()); // may only be int?
			stmt.setDouble(i++, file.getLat());
			stmt.setDouble(i++, file.getLng());							// 10
			stmt.setBoolean(i++, file.isPublic());
			stmt.setBoolean(i++, file.isVerified());
			stmt.setInt(i++, file.getLength());
			stmt.setInt(i++, file.getHeigth());
			stmt.setInt(i++, file.getWidth());							// 15
			stmt.setString(i++, file.getResolution());
			
			// execute insert
			final int entityId = stmt.executeUpdate();
			if(entityId > 0) {
				return true;
			}
			
		} catch (SQLException e) {
			LOG.error("could not write file metadata to database", e);
			System.out.println("could not write file metadata to database");
		}
		return false;
	}

	public void close() {
		if(conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				LOG.error("Could not close database connection!", e);
			}
		}
	}
}
